// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import module "github.com/open-ness/EMCO/src/dcm/pkg/module"

// LogicalCloudManager is an autogenerated mock type for the LogicalCloudManager type
type LogicalCloudManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: project, c
func (_m *LogicalCloudManager) Create(project string, c module.LogicalCloud) (module.LogicalCloud, error) {
	ret := _m.Called(project, c)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, module.LogicalCloud) module.LogicalCloud); ok {
		r0 = rf(project, c)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, module.LogicalCloud) error); ok {
		r1 = rf(project, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: project, name
func (_m *LogicalCloudManager) Delete(project string, name string) error {
	ret := _m.Called(project, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(project, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: project, name
func (_m *LogicalCloudManager) Get(project string, name string) (module.LogicalCloud, error) {
	ret := _m.Called(project, name)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, string) module.LogicalCloud); ok {
		r0 = rf(project, name)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: project
func (_m *LogicalCloudManager) GetAll(project string) ([]module.LogicalCloud, error) {
	ret := _m.Called(project)

	var r0 []module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string) []module.LogicalCloud); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.LogicalCloud)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: project, name, c
func (_m *LogicalCloudManager) Update(project string, name string, c module.LogicalCloud) (module.LogicalCloud, error) {
	ret := _m.Called(project, name, c)

	var r0 module.LogicalCloud
	if rf, ok := ret.Get(0).(func(string, string, module.LogicalCloud) module.LogicalCloud); ok {
		r0 = rf(project, name, c)
	} else {
		r0 = ret.Get(0).(module.LogicalCloud)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, module.LogicalCloud) error); ok {
		r1 = rf(project, name, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
