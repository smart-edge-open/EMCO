// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import module "github.com/open-ness/EMCO/src/dcm/pkg/module"

// KeyValueManager is an autogenerated mock type for the KeyValueManager type
type KeyValueManager struct {
	mock.Mock
}

// CreateKVPair provides a mock function with given fields: project, logicalCloud, c
func (_m *KeyValueManager) CreateKVPair(project string, logicalCloud string, c module.KeyValue) (module.KeyValue, error) {
	ret := _m.Called(project, logicalCloud, c)

	var r0 module.KeyValue
	if rf, ok := ret.Get(0).(func(string, string, module.KeyValue) module.KeyValue); ok {
		r0 = rf(project, logicalCloud, c)
	} else {
		r0 = ret.Get(0).(module.KeyValue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, module.KeyValue) error); ok {
		r1 = rf(project, logicalCloud, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKVPair provides a mock function with given fields: project, logicalCloud, name
func (_m *KeyValueManager) DeleteKVPair(project string, logicalCloud string, name string) error {
	ret := _m.Called(project, logicalCloud, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(project, logicalCloud, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllKVPairs provides a mock function with given fields: project, logicalCloud
func (_m *KeyValueManager) GetAllKVPairs(project string, logicalCloud string) ([]module.KeyValue, error) {
	ret := _m.Called(project, logicalCloud)

	var r0 []module.KeyValue
	if rf, ok := ret.Get(0).(func(string, string) []module.KeyValue); ok {
		r0 = rf(project, logicalCloud)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.KeyValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, logicalCloud)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKVPair provides a mock function with given fields: project, logicalCloud, name
func (_m *KeyValueManager) GetKVPair(project string, logicalCloud string, name string) (module.KeyValue, error) {
	ret := _m.Called(project, logicalCloud, name)

	var r0 module.KeyValue
	if rf, ok := ret.Get(0).(func(string, string, string) module.KeyValue); ok {
		r0 = rf(project, logicalCloud, name)
	} else {
		r0 = ret.Get(0).(module.KeyValue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, logicalCloud, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKVPair provides a mock function with given fields: project, logicalCloud, name, c
func (_m *KeyValueManager) UpdateKVPair(project string, logicalCloud string, name string, c module.KeyValue) (module.KeyValue, error) {
	ret := _m.Called(project, logicalCloud, name, c)

	var r0 module.KeyValue
	if rf, ok := ret.Get(0).(func(string, string, string, module.KeyValue) module.KeyValue); ok {
		r0 = rf(project, logicalCloud, name, c)
	} else {
		r0 = ret.Get(0).(module.KeyValue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, module.KeyValue) error); ok {
		r1 = rf(project, logicalCloud, name, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
