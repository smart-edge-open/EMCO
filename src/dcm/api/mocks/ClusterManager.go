// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import module "github.com/open-ness/EMCO/src/dcm/pkg/module"

// ClusterManager is an autogenerated mock type for the ClusterManager type
type ClusterManager struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: project, logicalCloud, c
func (_m *ClusterManager) CreateCluster(project string, logicalCloud string, c module.Cluster) (module.Cluster, error) {
	ret := _m.Called(project, logicalCloud, c)

	var r0 module.Cluster
	if rf, ok := ret.Get(0).(func(string, string, module.Cluster) module.Cluster); ok {
		r0 = rf(project, logicalCloud, c)
	} else {
		r0 = ret.Get(0).(module.Cluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, module.Cluster) error); ok {
		r1 = rf(project, logicalCloud, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: project, logicalCloud, name
func (_m *ClusterManager) DeleteCluster(project string, logicalCloud string, name string) error {
	ret := _m.Called(project, logicalCloud, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(project, logicalCloud, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllClusters provides a mock function with given fields: project, logicalCloud
func (_m *ClusterManager) GetAllClusters(project string, logicalCloud string) ([]module.Cluster, error) {
	ret := _m.Called(project, logicalCloud)

	var r0 []module.Cluster
	if rf, ok := ret.Get(0).(func(string, string) []module.Cluster); ok {
		r0 = rf(project, logicalCloud)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, logicalCloud)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: project, logicalCloud, name
func (_m *ClusterManager) GetCluster(project string, logicalCloud string, name string) (module.Cluster, error) {
	ret := _m.Called(project, logicalCloud, name)

	var r0 module.Cluster
	if rf, ok := ret.Get(0).(func(string, string, string) module.Cluster); ok {
		r0 = rf(project, logicalCloud, name)
	} else {
		r0 = ret.Get(0).(module.Cluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, logicalCloud, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterConfig provides a mock function with given fields: project, logicalcloud, name
func (_m *ClusterManager) GetClusterConfig(project string, logicalcloud string, name string) (string, error) {
	ret := _m.Called(project, logicalcloud, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(project, logicalcloud, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, logicalcloud, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: project, logicalCloud, name, c
func (_m *ClusterManager) UpdateCluster(project string, logicalCloud string, name string, c module.Cluster) (module.Cluster, error) {
	ret := _m.Called(project, logicalCloud, name, c)

	var r0 module.Cluster
	if rf, ok := ret.Get(0).(func(string, string, string, module.Cluster) module.Cluster); ok {
		r0 = rf(project, logicalCloud, name, c)
	} else {
		r0 = ret.Get(0).(module.Cluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, module.Cluster) error); ok {
		r1 = rf(project, logicalCloud, name, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
