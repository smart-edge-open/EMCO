// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clmcontrollereventchannel.proto

package clmcontrollereventchannel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClmControllerEventType int32

const (
	ClmControllerEventType_CLUSTER_CREATED ClmControllerEventType = 0
	ClmControllerEventType_CLUSTER_UPDATED ClmControllerEventType = 1
	ClmControllerEventType_CLUSTER_DELETED ClmControllerEventType = 2
)

var ClmControllerEventType_name = map[int32]string{
	0: "CLUSTER_CREATED",
	1: "CLUSTER_UPDATED",
	2: "CLUSTER_DELETED",
}
var ClmControllerEventType_value = map[string]int32{
	"CLUSTER_CREATED": 0,
	"CLUSTER_UPDATED": 1,
	"CLUSTER_DELETED": 2,
}

func (x ClmControllerEventType) String() string {
	return proto.EnumName(ClmControllerEventType_name, int32(x))
}
func (ClmControllerEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_clmcontrollereventchannel_bc8751c73ef6fb19, []int{0}
}

type ClmControllerEventRequest struct {
	ProviderName         string                 `protobuf:"bytes,1,opt,name=providerName,proto3" json:"providerName,omitempty"`
	ClusterName          string                 `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Event                ClmControllerEventType `protobuf:"varint,3,opt,name=event,proto3,enum=ClmControllerEventType" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClmControllerEventRequest) Reset()         { *m = ClmControllerEventRequest{} }
func (m *ClmControllerEventRequest) String() string { return proto.CompactTextString(m) }
func (*ClmControllerEventRequest) ProtoMessage()    {}
func (*ClmControllerEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_clmcontrollereventchannel_bc8751c73ef6fb19, []int{0}
}
func (m *ClmControllerEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClmControllerEventRequest.Unmarshal(m, b)
}
func (m *ClmControllerEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClmControllerEventRequest.Marshal(b, m, deterministic)
}
func (dst *ClmControllerEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClmControllerEventRequest.Merge(dst, src)
}
func (m *ClmControllerEventRequest) XXX_Size() int {
	return xxx_messageInfo_ClmControllerEventRequest.Size(m)
}
func (m *ClmControllerEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClmControllerEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClmControllerEventRequest proto.InternalMessageInfo

func (m *ClmControllerEventRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ClmControllerEventRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClmControllerEventRequest) GetEvent() ClmControllerEventType {
	if m != nil {
		return m.Event
	}
	return ClmControllerEventType_CLUSTER_CREATED
}

type ClmControllerEventResponse struct {
	ProviderName         string   `protobuf:"bytes,1,opt,name=providerName,proto3" json:"providerName,omitempty"`
	ClusterName          string   `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Status               bool     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClmControllerEventResponse) Reset()         { *m = ClmControllerEventResponse{} }
func (m *ClmControllerEventResponse) String() string { return proto.CompactTextString(m) }
func (*ClmControllerEventResponse) ProtoMessage()    {}
func (*ClmControllerEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_clmcontrollereventchannel_bc8751c73ef6fb19, []int{1}
}
func (m *ClmControllerEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClmControllerEventResponse.Unmarshal(m, b)
}
func (m *ClmControllerEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClmControllerEventResponse.Marshal(b, m, deterministic)
}
func (dst *ClmControllerEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClmControllerEventResponse.Merge(dst, src)
}
func (m *ClmControllerEventResponse) XXX_Size() int {
	return xxx_messageInfo_ClmControllerEventResponse.Size(m)
}
func (m *ClmControllerEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClmControllerEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClmControllerEventResponse proto.InternalMessageInfo

func (m *ClmControllerEventResponse) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ClmControllerEventResponse) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClmControllerEventResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ClmControllerEventResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ClmControllerEventRequest)(nil), "ClmControllerEventRequest")
	proto.RegisterType((*ClmControllerEventResponse)(nil), "ClmControllerEventResponse")
	proto.RegisterEnum("ClmControllerEventType", ClmControllerEventType_name, ClmControllerEventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClmControllerEventChannelClient is the client API for ClmControllerEventChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClmControllerEventChannelClient interface {
	Publish(ctx context.Context, in *ClmControllerEventRequest, opts ...grpc.CallOption) (*ClmControllerEventResponse, error)
}

type clmControllerEventChannelClient struct {
	cc *grpc.ClientConn
}

func NewClmControllerEventChannelClient(cc *grpc.ClientConn) ClmControllerEventChannelClient {
	return &clmControllerEventChannelClient{cc}
}

func (c *clmControllerEventChannelClient) Publish(ctx context.Context, in *ClmControllerEventRequest, opts ...grpc.CallOption) (*ClmControllerEventResponse, error) {
	out := new(ClmControllerEventResponse)
	err := c.cc.Invoke(ctx, "/ClmControllerEventChannel/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClmControllerEventChannelServer is the server API for ClmControllerEventChannel service.
type ClmControllerEventChannelServer interface {
	Publish(context.Context, *ClmControllerEventRequest) (*ClmControllerEventResponse, error)
}

func RegisterClmControllerEventChannelServer(s *grpc.Server, srv ClmControllerEventChannelServer) {
	s.RegisterService(&_ClmControllerEventChannel_serviceDesc, srv)
}

func _ClmControllerEventChannel_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClmControllerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClmControllerEventChannelServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClmControllerEventChannel/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClmControllerEventChannelServer).Publish(ctx, req.(*ClmControllerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClmControllerEventChannel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ClmControllerEventChannel",
	HandlerType: (*ClmControllerEventChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ClmControllerEventChannel_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clmcontrollereventchannel.proto",
}

func init() {
	proto.RegisterFile("clmcontrollereventchannel.proto", fileDescriptor_clmcontrollereventchannel_bc8751c73ef6fb19)
}

var fileDescriptor_clmcontrollereventchannel_bc8751c73ef6fb19 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x97, 0xa9, 0x9b, 0x7e, 0x8a, 0x4a, 0x84, 0x59, 0xeb, 0xc1, 0xd2, 0xd3, 0x10, 0xec,
	0x61, 0xfe, 0x02, 0x69, 0x73, 0x1b, 0x32, 0x62, 0x87, 0x47, 0xc9, 0xea, 0x87, 0x1b, 0xa4, 0x49,
	0x4d, 0xd2, 0x81, 0xff, 0xc2, 0x83, 0x3f, 0x58, 0x96, 0x4d, 0xa9, 0xd8, 0xdd, 0x76, 0xfc, 0x1e,
	0x9e, 0xf0, 0xbe, 0xe4, 0x85, 0x9b, 0x42, 0x96, 0x85, 0x56, 0xce, 0x68, 0x29, 0xd1, 0xe0, 0x12,
	0x95, 0x2b, 0xe6, 0x42, 0x29, 0x94, 0x49, 0x65, 0xb4, 0xd3, 0xf1, 0x27, 0x81, 0xab, 0x54, 0x96,
	0xe9, 0xaf, 0xc3, 0x56, 0x0e, 0xc7, 0xf7, 0x1a, 0xad, 0xa3, 0x31, 0x9c, 0x54, 0x46, 0x2f, 0x17,
	0xaf, 0x68, 0x1e, 0x45, 0x89, 0x01, 0x89, 0xc8, 0xf0, 0x88, 0xff, 0x61, 0x34, 0x82, 0xe3, 0x42,
	0xd6, 0xd6, 0x6d, 0x94, 0xae, 0x57, 0x9a, 0x88, 0xde, 0xc1, 0x81, 0x4f, 0x0e, 0xf6, 0x22, 0x32,
	0x3c, 0x1d, 0x5d, 0x26, 0xff, 0x03, 0xf3, 0x8f, 0x0a, 0xf9, 0xda, 0x8a, 0xbf, 0x08, 0x84, 0x6d,
	0x95, 0x6c, 0xa5, 0x95, 0xc5, 0x1d, 0x75, 0x1a, 0x40, 0xcf, 0x3a, 0xe1, 0x6a, 0xeb, 0x4b, 0x1d,
	0xf2, 0xcd, 0x45, 0x03, 0xe8, 0x97, 0x68, 0xad, 0x78, 0xc3, 0x60, 0xdf, 0xbf, 0xfa, 0x39, 0x6f,
	0x9f, 0x61, 0xd0, 0xde, 0x9b, 0x5e, 0xc0, 0x59, 0x3a, 0x9e, 0x3e, 0xe5, 0x8c, 0xbf, 0xa4, 0x9c,
	0x3d, 0xe4, 0x2c, 0x3b, 0xef, 0x34, 0xe1, 0x74, 0x92, 0x79, 0x48, 0x9a, 0x30, 0x63, 0x63, 0xb6,
	0x82, 0xdd, 0x91, 0x68, 0x5b, 0x20, 0x5d, 0xaf, 0x44, 0x33, 0xe8, 0x4f, 0xea, 0x99, 0x5c, 0xd8,
	0x39, 0x0d, 0x93, 0xad, 0x43, 0x85, 0xd7, 0xc9, 0xf6, 0x1f, 0x8b, 0x3b, 0xb3, 0x9e, 0x1f, 0xfb,
	0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xad, 0x26, 0xee, 0x0f, 0x02, 0x00, 0x00,
}
