// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	module "github.com/open-ness/EMCO/src/dtc/pkg/module"
	mock "github.com/stretchr/testify/mock"
)

// InboundServerIntentManager is an autogenerated mock type for the InboundServerIntentManager type
type InboundServerIntentManager struct {
	mock.Mock
}

// CreateServerInboundIntent provides a mock function with given fields: isi, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, exists
func (_m *InboundServerIntentManager) CreateServerInboundIntent(isi module.InboundServerIntent, project string, compositeapp string, compositeappversion string, deploymentIntentGroupName string, trafficintentgroupname string, exists bool) (module.InboundServerIntent, error) {
	ret := _m.Called(isi, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, exists)

	var r0 module.InboundServerIntent
	if rf, ok := ret.Get(0).(func(module.InboundServerIntent, string, string, string, string, string, bool) module.InboundServerIntent); ok {
		r0 = rf(isi, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, exists)
	} else {
		r0 = ret.Get(0).(module.InboundServerIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.InboundServerIntent, string, string, string, string, string, bool) error); ok {
		r1 = rf(isi, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServerInboundIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig, trafficintentgroupname
func (_m *InboundServerIntentManager) DeleteServerInboundIntent(name string, project string, compositeapp string, compositeappversion string, dig string, trafficintentgroupname string) error {
	ret := _m.Called(name, project, compositeapp, compositeappversion, dig, trafficintentgroupname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig, trafficintentgroupname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetServerInboundIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig, trafficintentgroupname
func (_m *InboundServerIntentManager) GetServerInboundIntent(name string, project string, compositeapp string, compositeappversion string, dig string, trafficintentgroupname string) (module.InboundServerIntent, error) {
	ret := _m.Called(name, project, compositeapp, compositeappversion, dig, trafficintentgroupname)

	var r0 module.InboundServerIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) module.InboundServerIntent); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig, trafficintentgroupname)
	} else {
		r0 = ret.Get(0).(module.InboundServerIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(name, project, compositeapp, compositeappversion, dig, trafficintentgroupname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerInboundIntents provides a mock function with given fields: project, compositeapp, compositeappversion, dig, intentName
func (_m *InboundServerIntentManager) GetServerInboundIntents(project string, compositeapp string, compositeappversion string, dig string, intentName string) ([]module.InboundServerIntent, error) {
	ret := _m.Called(project, compositeapp, compositeappversion, dig, intentName)

	var r0 []module.InboundServerIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) []module.InboundServerIntent); ok {
		r0 = rf(project, compositeapp, compositeappversion, dig, intentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.InboundServerIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(project, compositeapp, compositeappversion, dig, intentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
