// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	controller "github.com/open-ness/EMCO/src/orchestrator/pkg/module/controller"
	mock "github.com/stretchr/testify/mock"
)

// ControllerManager is an autogenerated mock type for the ControllerManager type
type ControllerManager struct {
	mock.Mock
}

// CreateController provides a mock function with given fields: ms, mayExist
func (_m *ControllerManager) CreateController(ms controller.Controller, mayExist bool) (controller.Controller, error) {
	ret := _m.Called(ms, mayExist)

	var r0 controller.Controller
	if rf, ok := ret.Get(0).(func(controller.Controller, bool) controller.Controller); ok {
		r0 = rf(ms, mayExist)
	} else {
		r0 = ret.Get(0).(controller.Controller)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(controller.Controller, bool) error); ok {
		r1 = rf(ms, mayExist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteController provides a mock function with given fields: name
func (_m *ControllerManager) DeleteController(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetController provides a mock function with given fields: name
func (_m *ControllerManager) GetController(name string) (controller.Controller, error) {
	ret := _m.Called(name)

	var r0 controller.Controller
	if rf, ok := ret.Get(0).(func(string) controller.Controller); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(controller.Controller)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetControllers provides a mock function with given fields:
func (_m *ControllerManager) GetControllers() ([]controller.Controller, error) {
	ret := _m.Called()

	var r0 []controller.Controller
	if rf, ok := ret.Get(0).(func() []controller.Controller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]controller.Controller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitControllers provides a mock function with given fields:
func (_m *ControllerManager) InitControllers() {
	_m.Called()
}
