// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	module "github.com/open-ness/EMCO/src/dtc/pkg/module"
	mock "github.com/stretchr/testify/mock"
)

// InboundClientsIntentManager is an autogenerated mock type for the InboundClientsIntentManager type
type InboundClientsIntentManager struct {
	mock.Mock
}

// CreateClientsInboundIntent provides a mock function with given fields: tci, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficIntentGroupName, inboundIntentName, exists
func (_m *InboundClientsIntentManager) CreateClientsInboundIntent(tci module.InboundClientsIntent, project string, compositeapp string, compositeappversion string, deploymentIntentGroupName string, trafficIntentGroupName string, inboundIntentName string, exists bool) (module.InboundClientsIntent, error) {
	ret := _m.Called(tci, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficIntentGroupName, inboundIntentName, exists)

	var r0 module.InboundClientsIntent
	if rf, ok := ret.Get(0).(func(module.InboundClientsIntent, string, string, string, string, string, string, bool) module.InboundClientsIntent); ok {
		r0 = rf(tci, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficIntentGroupName, inboundIntentName, exists)
	} else {
		r0 = ret.Get(0).(module.InboundClientsIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.InboundClientsIntent, string, string, string, string, string, string, bool) error); ok {
		r1 = rf(tci, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficIntentGroupName, inboundIntentName, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientsInboundIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, deploymentintentgroupname, trafficintentgroupname, inboundserverintentname
func (_m *InboundClientsIntentManager) DeleteClientsInboundIntent(name string, project string, compositeapp string, compositeappversion string, deploymentintentgroupname string, trafficintentgroupname string, inboundserverintentname string) error {
	ret := _m.Called(name, project, compositeapp, compositeappversion, deploymentintentgroupname, trafficintentgroupname, inboundserverintentname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) error); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, deploymentintentgroupname, trafficintentgroupname, inboundserverintentname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientsInboundIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName
func (_m *InboundClientsIntentManager) GetClientsInboundIntent(name string, project string, compositeapp string, compositeappversion string, deploymentIntentGroupName string, trafficintentgroupname string, inboundIntentName string) (module.InboundClientsIntent, error) {
	ret := _m.Called(name, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName)

	var r0 module.InboundClientsIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) module.InboundClientsIntent); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName)
	} else {
		r0 = ret.Get(0).(module.InboundClientsIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(name, project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientsInboundIntents provides a mock function with given fields: project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName
func (_m *InboundClientsIntentManager) GetClientsInboundIntents(project string, compositeapp string, compositeappversion string, deploymentIntentGroupName string, trafficintentgroupname string, inboundIntentName string) ([]module.InboundClientsIntent, error) {
	ret := _m.Called(project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName)

	var r0 []module.InboundClientsIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) []module.InboundClientsIntent); ok {
		r0 = rf(project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.InboundClientsIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(project, compositeapp, compositeappversion, deploymentIntentGroupName, trafficintentgroupname, inboundIntentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
