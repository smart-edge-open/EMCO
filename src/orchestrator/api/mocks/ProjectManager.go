// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import module "github.com/open-ness/EMCO/src/orchestrator/pkg/module"

// ProjectManager is an autogenerated mock type for the ProjectManager type
type ProjectManager struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: pr, exists
func (_m *ProjectManager) CreateProject(pr module.Project, exists bool) (module.Project, error) {
	ret := _m.Called(pr, exists)

	var r0 module.Project
	if rf, ok := ret.Get(0).(func(module.Project, bool) module.Project); ok {
		r0 = rf(pr, exists)
	} else {
		r0 = ret.Get(0).(module.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.Project, bool) error); ok {
		r1 = rf(pr, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: name
func (_m *ProjectManager) DeleteProject(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProjects provides a mock function with given fields:
func (_m *ProjectManager) GetAllProjects() ([]module.Project, error) {
	ret := _m.Called()

	var r0 []module.Project
	if rf, ok := ret.Get(0).(func() []module.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: name
func (_m *ProjectManager) GetProject(name string) (module.Project, error) {
	ret := _m.Called(name)

	var r0 module.Project
	if rf, ok := ret.Get(0).(func(string) module.Project); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(module.Project)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
