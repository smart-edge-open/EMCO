// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "github.com/open-ness/EMCO/src/sfc/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// SfcProviderNetworkIntentManager is an autogenerated mock type for the SfcProviderNetworkIntentManager type
type SfcProviderNetworkIntentManager struct {
	mock.Mock
}

// CreateSfcProviderNetworkIntent provides a mock function with given fields: sfc, pr, ca, caver, dig, netctrlint, sfcIntent, exists
func (_m *SfcProviderNetworkIntentManager) CreateSfcProviderNetworkIntent(sfc model.SfcProviderNetworkIntent, pr string, ca string, caver string, dig string, netctrlint string, sfcIntent string, exists bool) (model.SfcProviderNetworkIntent, error) {
	ret := _m.Called(sfc, pr, ca, caver, dig, netctrlint, sfcIntent, exists)

	var r0 model.SfcProviderNetworkIntent
	if rf, ok := ret.Get(0).(func(model.SfcProviderNetworkIntent, string, string, string, string, string, string, bool) model.SfcProviderNetworkIntent); ok {
		r0 = rf(sfc, pr, ca, caver, dig, netctrlint, sfcIntent, exists)
	} else {
		r0 = ret.Get(0).(model.SfcProviderNetworkIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.SfcProviderNetworkIntent, string, string, string, string, string, string, bool) error); ok {
		r1 = rf(sfc, pr, ca, caver, dig, netctrlint, sfcIntent, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSfcProviderNetworkIntent provides a mock function with given fields: name, pr, ca, caver, dig, netctrlint, sfcIntent
func (_m *SfcProviderNetworkIntentManager) DeleteSfcProviderNetworkIntent(name string, pr string, ca string, caver string, dig string, netctrlint string, sfcIntent string) error {
	ret := _m.Called(name, pr, ca, caver, dig, netctrlint, sfcIntent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) error); ok {
		r0 = rf(name, pr, ca, caver, dig, netctrlint, sfcIntent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSfcProviderNetworkIntents provides a mock function with given fields: pr, ca, caver, dig, netctrlint, sfcIntent
func (_m *SfcProviderNetworkIntentManager) GetAllSfcProviderNetworkIntents(pr string, ca string, caver string, dig string, netctrlint string, sfcIntent string) ([]model.SfcProviderNetworkIntent, error) {
	ret := _m.Called(pr, ca, caver, dig, netctrlint, sfcIntent)

	var r0 []model.SfcProviderNetworkIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) []model.SfcProviderNetworkIntent); ok {
		r0 = rf(pr, ca, caver, dig, netctrlint, sfcIntent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SfcProviderNetworkIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(pr, ca, caver, dig, netctrlint, sfcIntent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSfcProviderNetworkIntent provides a mock function with given fields: name, pr, ca, caver, dig, netctrlint, sfcIntent
func (_m *SfcProviderNetworkIntentManager) GetSfcProviderNetworkIntent(name string, pr string, ca string, caver string, dig string, netctrlint string, sfcIntent string) (model.SfcProviderNetworkIntent, error) {
	ret := _m.Called(name, pr, ca, caver, dig, netctrlint, sfcIntent)

	var r0 model.SfcProviderNetworkIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) model.SfcProviderNetworkIntent); ok {
		r0 = rf(name, pr, ca, caver, dig, netctrlint, sfcIntent)
	} else {
		r0 = ret.Get(0).(model.SfcProviderNetworkIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(name, pr, ca, caver, dig, netctrlint, sfcIntent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSfcProviderNetworkIntentsByEnd provides a mock function with given fields: pr, ca, caver, dig, netctrlint, sfcIntent, chainEnd
func (_m *SfcProviderNetworkIntentManager) GetSfcProviderNetworkIntentsByEnd(pr string, ca string, caver string, dig string, netctrlint string, sfcIntent string, chainEnd string) ([]model.SfcProviderNetworkIntent, error) {
	ret := _m.Called(pr, ca, caver, dig, netctrlint, sfcIntent, chainEnd)

	var r0 []model.SfcProviderNetworkIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) []model.SfcProviderNetworkIntent); ok {
		r0 = rf(pr, ca, caver, dig, netctrlint, sfcIntent, chainEnd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SfcProviderNetworkIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(pr, ca, caver, dig, netctrlint, sfcIntent, chainEnd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
