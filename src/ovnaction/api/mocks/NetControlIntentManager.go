// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	module "github.com/open-ness/EMCO/src/ovnaction/pkg/module"
	mock "github.com/stretchr/testify/mock"
)

// NetControlIntentManager is an autogenerated mock type for the NetControlIntentManager type
type NetControlIntentManager struct {
	mock.Mock
}

// CreateNetControlIntent provides a mock function with given fields: nci, project, compositeapp, compositeappversion, dig, exists
func (_m *NetControlIntentManager) CreateNetControlIntent(nci module.NetControlIntent, project string, compositeapp string, compositeappversion string, dig string, exists bool) (module.NetControlIntent, error) {
	ret := _m.Called(nci, project, compositeapp, compositeappversion, dig, exists)

	var r0 module.NetControlIntent
	if rf, ok := ret.Get(0).(func(module.NetControlIntent, string, string, string, string, bool) module.NetControlIntent); ok {
		r0 = rf(nci, project, compositeapp, compositeappversion, dig, exists)
	} else {
		r0 = ret.Get(0).(module.NetControlIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.NetControlIntent, string, string, string, string, bool) error); ok {
		r1 = rf(nci, project, compositeapp, compositeappversion, dig, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetControlIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig
func (_m *NetControlIntentManager) DeleteNetControlIntent(name string, project string, compositeapp string, compositeappversion string, dig string) error {
	ret := _m.Called(name, project, compositeapp, compositeappversion, dig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNetControlIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig
func (_m *NetControlIntentManager) GetNetControlIntent(name string, project string, compositeapp string, compositeappversion string, dig string) (module.NetControlIntent, error) {
	ret := _m.Called(name, project, compositeapp, compositeappversion, dig)

	var r0 module.NetControlIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) module.NetControlIntent); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig)
	} else {
		r0 = ret.Get(0).(module.NetControlIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(name, project, compositeapp, compositeappversion, dig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetControlIntents provides a mock function with given fields: project, compositeapp, compositeappversion, dig
func (_m *NetControlIntentManager) GetNetControlIntents(project string, compositeapp string, compositeappversion string, dig string) ([]module.NetControlIntent, error) {
	ret := _m.Called(project, compositeapp, compositeappversion, dig)

	var r0 []module.NetControlIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string) []module.NetControlIntent); ok {
		r0 = rf(project, compositeapp, compositeappversion, dig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.NetControlIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(project, compositeapp, compositeappversion, dig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
