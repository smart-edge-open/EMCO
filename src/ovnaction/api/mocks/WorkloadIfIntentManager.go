// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	module "github.com/open-ness/EMCO/src/ovnaction/pkg/module"
	mock "github.com/stretchr/testify/mock"
)

// WorkloadIfIntentManager is an autogenerated mock type for the WorkloadIfIntentManager type
type WorkloadIfIntentManager struct {
	mock.Mock
}

// CreateWorkloadIfIntent provides a mock function with given fields: wi, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent, exists
func (_m *WorkloadIfIntentManager) CreateWorkloadIfIntent(wi module.WorkloadIfIntent, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string, workloadintent string, exists bool) (module.WorkloadIfIntent, error) {
	ret := _m.Called(wi, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent, exists)

	var r0 module.WorkloadIfIntent
	if rf, ok := ret.Get(0).(func(module.WorkloadIfIntent, string, string, string, string, string, string, bool) module.WorkloadIfIntent); ok {
		r0 = rf(wi, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent, exists)
	} else {
		r0 = ret.Get(0).(module.WorkloadIfIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(module.WorkloadIfIntent, string, string, string, string, string, string, bool) error); ok {
		r1 = rf(wi, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent, exists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkloadIfIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent
func (_m *WorkloadIfIntentManager) DeleteWorkloadIfIntent(name string, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string, workloadintent string) error {
	ret := _m.Called(name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) error); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkloadIfIntent provides a mock function with given fields: name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent
func (_m *WorkloadIfIntentManager) GetWorkloadIfIntent(name string, project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string, workloadintent string) (module.WorkloadIfIntent, error) {
	ret := _m.Called(name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)

	var r0 module.WorkloadIfIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) module.WorkloadIfIntent); ok {
		r0 = rf(name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)
	} else {
		r0 = ret.Get(0).(module.WorkloadIfIntent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(name, project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadIfIntents provides a mock function with given fields: project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent
func (_m *WorkloadIfIntentManager) GetWorkloadIfIntents(project string, compositeapp string, compositeappversion string, dig string, netcontrolintent string, workloadintent string) ([]module.WorkloadIfIntent, error) {
	ret := _m.Called(project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)

	var r0 []module.WorkloadIfIntent
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) []module.WorkloadIfIntent); ok {
		r0 = rf(project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]module.WorkloadIfIntent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(project, compositeapp, compositeappversion, dig, netcontrolintent, workloadintent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
